{"version":3,"sources":["style/Common.module.css","Component/Registration/Registration.module.css","Component/Registration/AppAC.ts","api/api.ts","Component/Registration/ErrorAC.ts","Component/Login/LoginTC.ts","Component/Login/Login.tsx","Component/Registration/RegisterTC.ts","Component/Registration/Registration.tsx","Component/Profile/Profile.tsx","Component/404/Page404.tsx","api/forgotPasswordApi.ts","Component/Forgot Password/ForgotPassword.tsx","Component/Forgot Password/CreateNewPassword.tsx","Component/Routes/Routes.tsx","App.tsx","reportWebVitals.ts","Store/cards.ts","Store/store.ts","index.tsx"],"names":["module","exports","requestStatus","instance","axios","create","baseURL","withCredentials","authAPI","params","post","delete","initialState","errorNetwork","setNetworkErrorAC","error","type","status","idle","appStatusToggleAC","isLoggedIn","user","loginToggleAC","Login","useState","email","setEmail","password","setPassword","rememberMe","setCheckBox","dispatch","useDispatch","useSelector","state","login","console","log","to","className","styleCommon","wrapper","placeholder","value","onChange","e","currentTarget","checked","onClick","loading","then","res","data","userData","succeeded","catch","failed","response","message","isAuth","Registration","repeatPassword","setRepeatPassword","register","statusApp","app","errors","styleRegister","btns","Profile","Page404","addNewPassAPI","ForgotPassword","dataPayload","from","CreateNewPassword","newPassword","setNewPassword","loadedStatus","setLoadedStatus","resetPasswordToken","useParams","token","prev","RoutesPart","path","element","App","useEffect","Routes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","reducers","combineReducers","cards","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5106cd8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Common_wrapper__3tLSR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registration_btns__1rxbD\"};","import {authAPI, LoginParamsType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosError} from \"axios\";\r\nimport {setNetworkErrorAC} from \"./ErrorAC\";\r\n\r\nexport enum requestStatus {\r\n    idle = 'idle',\r\n    loading = 'loading',\r\n    succeeded = 'succeeded',\r\n    failed = 'failed',\r\n}\r\n\r\nconst initialState = {\r\n    status: requestStatus.idle\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    status:  RequestStatusType;\r\n}\r\n\r\nexport type RequestStatusType =\r\n    | requestStatus.idle\r\n    | requestStatus.loading\r\n    | requestStatus.succeeded\r\n    | requestStatus.failed;\r\n\r\n\r\nexport const AppReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"APP/STATUS_TOGGLE\" :\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const appStatusToggleAC = (status: RequestStatusType) => (\r\n    {type: \"APP/STATUS_TOGGLE\", status} as const\r\n\r\n)\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof appStatusToggleAC>\r\n\r\n\r\n\r\n\r\nexport const AppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    authAPI.me().then(() => {\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n","import axios, {Axios, AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\" /*\"http://localhost:7542/2.0/\"*/,\r\n    withCredentials: true\r\n\r\n})\r\n\r\n//api\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n  }\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    login(params: LoginParamsType) {\r\n        return instance.post<any>('auth/login', params)\r\n    },\r\n    logOut(){\r\n        return instance.delete<any>('auth/me', {})\r\n    },\r\n    me(){\r\n        return instance.post<any>('auth/me', {})\r\n    },\r\n    register(params: LoginParamsType){\r\n        return instance.post<any>('auth/register', params)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//types\r\n\r\n","\r\nconst initialState = {\r\n    errorNetwork: \"\"\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    errorNetwork:  string;\r\n}\r\n\r\n\r\nexport const ErrorReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"ERROR/SET_ERROR_NETWORK\" :\r\n            return {...state, errorNetwork: action.error}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const setNetworkErrorAC = (error: string) => (\r\n    {type: \"ERROR/SET_ERROR_NETWORK\", error} as const\r\n\r\n)\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setNetworkErrorAC>\r\n\r\n\r\n","import {AxiosError} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/api\";\r\nimport { appStatusToggleAC, requestStatus } from \"../Registration/AppAC\";\r\nimport {setNetworkErrorAC} from \"../Registration/ErrorAC\";\r\n\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    user: {} as UserType\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean,\r\n    user: UserType\r\n}\r\n\r\n\r\ntype UserType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\n\r\n\r\n\r\n\r\nexport const LoginReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOGIN/IS_LOGGED_IN\" :\r\n            return {...state, isLoggedIn: action.isLoggedIn};\r\n        case \"LOGIN/SET_USER_DATA\" :\r\n            return {...state, user: action.user}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst loginToggleAC = (isLoggedIn: boolean) => (\r\n    {type: \"LOGIN/IS_LOGGED_IN\", isLoggedIn} as const\r\n)\r\n\r\n\r\nconst setUserDataAC = (user: UserType) => (\r\n    {type: \"LOGIN/SET_USER_DATA\", user} as const\r\n)\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof loginToggleAC>\r\n    | ReturnType<typeof setUserDataAC>\r\n\r\n\r\nexport const LoginTC = (params: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    authAPI.login(params).then((res) => {\r\n        console.log(\"user\", res.data)\r\n        const userData = res.data\r\n        dispatch(loginToggleAC(true))\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n        dispatch(setUserDataAC(userData))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\nexport const LogOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    authAPI.logOut().then((res) => {\r\n        dispatch(loginToggleAC(false))\r\n        console.log(\"user\", res.data)\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from './../../style/Common.module.css'\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginTC} from \"./LoginTC\";\r\nimport {AppStoreType} from \"../../Store/store\";\r\n\r\nexport const Login = () => {\r\n    const [email, setEmail] = useState<string>(\"trolololo@gmail.com\")\r\n    const [password, setPassword] = useState<string>(\"123456789As\")\r\n    const [rememberMe, setCheckBox] = useState<boolean>(false)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeCheckBoxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCheckBox(e.currentTarget.checked)\r\n    }\r\n\r\n\r\n    const onLoginButtonClick = () => {\r\n        dispatch(LoginTC({email, password, rememberMe}))\r\n    }\r\n    console.log(\"checkBox\", rememberMe)\r\n  if (isLoggedIn) {\r\n      return <Navigate to={\"/\"}/>\r\n  }\r\n\r\n    return (\r\n\r\n        <div className={styleCommon.wrapper}>\r\n            <div>Learning game</div>\r\n            <div>Sign in</div>\r\n            <div><input placeholder={\"Email\"}\r\n                        value={email} onChange={onChangeEmailHandler}/></div>\r\n            <div><input placeholder={\"Password\"}\r\n                        value={password} onChange={onChangePasswordHandler}/></div>\r\n            <div><input placeholder={\"remember me\"} type={\"checkbox\"}\r\n                       checked={rememberMe} onChange={onChangeCheckBoxHandler}/></div>\r\n            <Link to={\"/recover\"}> Forgot your password? </Link>\r\n            <div><button onClick={onLoginButtonClick}>Login</button> </div>\r\n            <div>Dont have an account</div>\r\n            <Link to={\"/registration\"}> Sign up </Link>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import {AxiosError} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/api\";\r\nimport {appStatusToggleAC, requestStatus} from \"./AppAC\";\r\nimport {setNetworkErrorAC} from \"./ErrorAC\";\r\n\r\nconst initialState = {\r\n    isAuth: false\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const RegisterReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"REGISTER/AUTH_TOGGLE\" :\r\n            return {...state, isAuth: action.isAuth}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst authToggleAC = (isAuth: boolean) => (\r\n    {type: \"REGISTER/AUTH_TOGGLE\", isAuth} as const\r\n\r\n)\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof authToggleAC>\r\n\r\n\r\nexport const RegisterTC = (params: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    authAPI.register(params).then(() => {\r\n        dispatch(authToggleAC(true))\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\nimport styleRegister from \"./Registration.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RegisterTC} from './RegisterTC';\r\nimport {AppStoreType} from \"../../Store/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {requestStatus, RequestStatusType} from \"./AppAC\";\r\nimport {setNetworkErrorAC} from \"./ErrorAC\";\r\n\r\n\r\nconst Registration = () => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\")\r\n\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppStoreType, boolean>(state => state.register.isAuth)\r\n    const statusApp = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\r\n    const errorNetwork = useSelector<AppStoreType, string>(state => state.errors.errorNetwork)\r\n\r\n\r\n    const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeRepeatPasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRepeatPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onRegisterButtonClick = () => {\r\n        dispatch(RegisterTC({email, password}))\r\n    }\r\n    const onCancelButtonClick = () => {\r\n        dispatch(setNetworkErrorAC(\" \"))\r\n        setEmail(\"\")\r\n        setPassword(\"\")\r\n        setRepeatPassword(\"\")\r\n    }\r\n\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {statusApp === requestStatus.loading ? <div>Loading...</div> : (\r\n                <div className={styleCommon.wrapper}>\r\n                    <div>Learning game</div>\r\n                    <div>Sign up</div>\r\n                    {errorNetwork ? <span>{errorNetwork}</span>: <span></span>}\r\n                    <div>\r\n                        <input placeholder=\"Email\"\r\n                               value={email} onChange={onChangeEmailHandler}/></div>\r\n                    <div>\r\n                        <input placeholder=\"Password\"\r\n                               value={password} onChange={onChangePasswordHandler}/></div>\r\n                    <div>\r\n                        <input placeholder=\"Confirm password\"\r\n                               value={repeatPassword} onChange={onChangeRepeatPasswordHandler}/></div>\r\n                    <div className={styleRegister.btns}>\r\n                        <div>\r\n                            <button onClick={onCancelButtonClick}>Cancel</button>\r\n                        </div>\r\n                        <div>\r\n                            <button onClick={onRegisterButtonClick}>Register</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>)}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Registration;","import React from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LogOutTC} from \"../Login/LoginTC\";\r\nimport {AppStoreType} from \"../../Store/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nconst Profile = () => {\r\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const dispatch = useDispatch();\r\n    const onLogOutButtonClick = () => {\r\n        dispatch(LogOutTC())\r\n    }\r\n   if (!isLoggedIn) {\r\n        return <Navigate to={'login'}/>\r\n    }\r\n    return (\r\n        <div className={styleCommon.wrapper}>\r\n            <h1>profile</h1>\r\n            <div>\r\n                <button onClick={onLogOutButtonClick}>LogOut</button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <div className={styleCommon.wrapper}>\r\n            <h1>404:page NOT found</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Page404;","import axios, {Axios, AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\" /*\"http://localhost:7542/2.0/\"*/,\r\n    withCredentials: true\r\n\r\n})\r\n\r\n//api\r\n\r\nexport type AddNewPassType = {\r\n    email: string;\r\n    from?: string\r\n    message?: string\r\n};\r\n\r\n\r\nexport type SetNewPassType = {\r\n    password: string;\r\n    resetPasswordToken?: string;\r\n};\r\n\r\n\r\nexport const addNewPassAPI = {\r\n    addNewPass(params: AddNewPassType) {\r\n        return instance.post<AddNewPassType, AxiosResponse<any>>(\r\n            'auth/forgot',\r\n            params,\r\n        );\r\n    },\r\n    setNewPass(params: SetNewPassType) {\r\n        return instance.post<SetNewPassType, AxiosResponse<any>>(\r\n            'auth/set-new-password',\r\n            params,\r\n        );\r\n    },\r\n};\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {addNewPassAPI, AddNewPassType} from \"../../api/forgotPasswordApi\";\r\n\r\nconst ForgotPassword = () => {\r\n    const [email, setEmail] = useState<string>(\"samutic40@gmail.com\")\r\n\r\n    const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const dataPayload: AddNewPassType = {\r\n        email,\r\n        from: 'test-front-admin <samutic40@gmail.com>',\r\n        message: `<div style='background-color: #ffd500; \r\npadding: 15px; \r\nborder-color: #ff9900; \r\nwidth: 250px;\r\nheight: 30px'> \r\npassword recovery link: <a href='http://localhost:3000/cards#/newPassword/$token$'> recovery link </a></div>`,\r\n    };\r\n\r\n\r\n    const onSendButtonClick = () => {\r\n        addNewPassAPI.addNewPass(dataPayload).then((res) => {\r\n            console.log(\"res\", res.data)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styleCommon.wrapper}>\r\n            <div>Learning game</div>\r\n            <div>Forgot your password?</div>\r\n            <div><input placeholder={\"Email\"}\r\n            value={email} onChange={onChangeEmailHandler}/></div>\r\n            <div>Enter your Email and we will send you further instructions</div>\r\n            <div><button onClick={onSendButtonClick}>Send instructions</button> </div>\r\n            <div>Did you remember your password?</div>\r\n            <Link to={\"/login\"}> Try logging in </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPassword;","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {addNewPassAPI} from \"../../api/forgotPasswordApi\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst CreateNewPassword = () => {\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [loadedStatus, setLoadedStatus] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const params = useParams<'token'>();\r\n    const { token } = params as { token: string };\r\n\r\n    const data: any = {\r\n        password: newPassword,\r\n        resetPasswordToken: token,\r\n    };\r\n\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onCreateButtonClick = () => {\r\n        addNewPassAPI.setNewPass(data).then((res) => {\r\n            setLoadedStatus((prev) => true)\r\n        })\r\n\r\n    }\r\n\r\n    if (loadedStatus) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return (\r\n        <div className={styleCommon.wrapper}>\r\n            <div>Learning game</div>\r\n            <div>Create new password?</div>\r\n            <div><input placeholder={\"Password\"} onChange={onChangePasswordHandler} value={newPassword}/></div>\r\n            <div>Create new password and we will send you further instructions to email</div>\r\n            <div><button onClick={onCreateButtonClick}\r\n            >Create new password</button> </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateNewPassword;","import React from 'react';\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport Registration from \"../Registration/Registration\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport Page404 from \"../404/Page404\";\r\nimport ForgotPassword from \"../Forgot Password/ForgotPassword\";\r\nimport CreateNewPassword from \"../Forgot Password/CreateNewPassword\";\r\n\r\nconst RoutesPart = () => {\r\n    return (\r\n\r\n            <Routes>\r\n                <Route path={'login'} element={<Login/>}/>\r\n                <Route path={'registration'} element={<Registration/>}/>\r\n                <Route path={'/'} element={<Profile/>}/>\r\n                <Route path={'404'} element={<Page404/>}/>\r\n                <Route path={'*'} element={<Navigate to='/404'/>}/>\r\n                <Route path={'recover'} element={<ForgotPassword/>}/>\r\n                <Route path={'newPassword'} element={<CreateNewPassword/>}>\r\n                    <Route path=\":token\" element={<CreateNewPassword/>}/>\r\n                </Route>\r\n            </Routes>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default RoutesPart;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport RoutesPart from \"./Component/Routes/Routes\";\r\nimport {AppTC, requestStatus, RequestStatusType} from \"./Component/Registration/AppAC\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"./Store/store\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n    const statusApp = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        dispatch(AppTC())\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                <NavLink to={'login'}>login</NavLink>---\r\n                <NavLink to={'/'}>profile</NavLink>---\r\n                <NavLink to={'registration'}>registration</NavLink>---\r\n                <NavLink to={'recover'}>recover</NavLink>---\r\n                <NavLink to={'*'}>404</NavLink>---\r\n                <NavLink to={'newPassword/:token'}>create new</NavLink>\r\n            </div>\r\n\r\n            {statusApp === requestStatus.loading ? <div> loading... </div> :  <RoutesPart/>  }\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = {\r\n\r\n}\r\n\r\ntype initStateType = {\r\n\r\n}\r\n\r\nexport const cardReducer = (state: initStateType = initState, action: any): initStateType => {\r\n    switch (action.type) {\r\n        case \"\": {\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {cardReducer} from \"./cards\";\r\nimport {RegisterReducer} from \"../Component/Registration/RegisterTC\";\r\nimport thunk from 'redux-thunk';\r\nimport {AppReducer} from \"../Component/Registration/AppAC\";\r\nimport {ErrorReducer} from \"../Component/Registration/ErrorAC\";\r\nimport {LoginReducer} from \"../Component/Login/LoginTC\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    cards: cardReducer,\r\n    register: RegisterReducer,\r\n    app: AppReducer,\r\n    errors: ErrorReducer,\r\n    login: LoginReducer,\r\n})\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Store/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}