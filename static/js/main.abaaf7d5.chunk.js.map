{"version":3,"sources":["style/Common.module.css","Component/Packs/Sort.module.css","Component/Profile/Profile.module.css","Component/Registration/Registration.module.css","Component/Packs/Packs.module.css","Component/Registration/AppAC.ts","api/api.ts","Component/Registration/ErrorAC.ts","Component/Login/LoginTC.ts","Component/Login/Login.tsx","Component/Registration/RegisterTC.ts","Component/Registration/Registration.tsx","api/profileApi.ts","Component/Profile/Profile.tsx","Component/404/Page404.tsx","api/forgotPasswordApi.ts","Component/Forgot Password/ForgotPassword.tsx","Component/Forgot Password/CreateNewPassword.tsx","api/packsApi.ts","Component/Packs/PacksTC.ts","Component/Packs/Range.tsx","Component/Packs/SortPart.tsx","Component/Packs/Pagination.tsx","Component/Packs/Sort.tsx","Component/Packs/Table.tsx","Component/Packs/Packs.tsx","api/cardsApi.ts","Component/Cards/CardsTC.tsx","Component/Cards/Cards.tsx","Component/Routes/Routes.tsx","App.tsx","reportWebVitals.ts","Store/store.ts","index.tsx","Component/Packs/Table.module.css"],"names":["module","exports","requestStatus","instance","axios","create","baseURL","withCredentials","authAPI","params","post","delete","initialState","errorNetwork","setNetworkErrorAC","error","type","status","idle","appStatusToggleAC","isLoggedIn","user","loginToggleAC","setUserDataAC","Login","useState","email","setEmail","password","setPassword","rememberMe","setCheckBox","dispatch","useDispatch","useSelector","state","login","console","log","to","className","styleCommon","wrapper","placeholder","value","onChange","e","currentTarget","checked","onClick","loading","then","res","data","userData","succeeded","catch","failed","response","message","isAuth","Registration","repeatPassword","setRepeatPassword","register","statusApp","app","errors","styleRegister","btns","profileAPI","put","Profile","name","setName","editMode","setEditMode","userAvatar","avatar","activateEditForm","hideEditForm","src","alt","styleProfile","event","onBlur","onDoubleClick","updatedUser","Page404","addNewPassAPI","ForgotPassword","dataPayload","from","CreateNewPassword","newPassword","setNewPassword","loadedStatus","setLoadedStatus","resetPasswordToken","useParams","token","prev","packsAPI","get","id","cardsPack","PACKS_SET_CURRENT_PAGE","PACKS_SET_TOTAL_COUNT","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","setPacksAC","payload","setCurrentPageAC","currentPage","PacksTC","getState","packs","sortUpPacksTC","sortPacks","Range","number","setNumber","SortPart","styleSort","content","_id","user_id","Pagination","props","pages","Math","ceil","totalCount","pagesCount","i","push","createPages","map","index","styleTable","selectedPage","Sort","arrows","arrowUp","arrowDown","Table","searchName","setSearchName","onDeleteButtonClick","resultPacks","pack","table","tableEl","tableElSmall","cardsCount","user_name","updated","onKeyPress","charCode","packName","searchPacksTC","newCardsPack","random","Packs","stylePacks","cardsAPI","cardsPackId","answer","question","cards","cardsTotalCount","grade","shots","maxGrade","minGrade","packUserId","Cards","cardsPack_id","useNavigate","resultCard","card","style","display","useEffect","setCardsAC","RoutesPart","path","element","App","Routes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","filter","c","dataUpdate","deck","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abaaf7d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Common_wrapper__3tLSR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Sort_content__1Dxsr\",\"btns\":\"Sort_btns__gMJjW\",\"arrowUp\":\"Sort_arrowUp__2dk1S\",\"arrowDown\":\"Sort_arrowDown__9-F3h\",\"arrows\":\"Sort_arrows__3Xvp9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Profile_avatar__wG5ZD\",\"btns\":\"Profile_btns__2r1E2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registration_btns__1rxbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Packs_content__4rMPd\"};","import {authAPI, LoginParamsType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosError} from \"axios\";\r\nimport {setNetworkErrorAC} from \"./ErrorAC\";\r\n\r\nexport enum requestStatus {\r\n    idle = 'idle',\r\n    loading = 'loading',\r\n    succeeded = 'succeeded',\r\n    failed = 'failed',\r\n}\r\n\r\nconst initialState = {\r\n    status: requestStatus.idle\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    status:  RequestStatusType;\r\n}\r\n\r\nexport type RequestStatusType =\r\n    | requestStatus.idle\r\n    | requestStatus.loading\r\n    | requestStatus.succeeded\r\n    | requestStatus.failed;\r\n\r\n\r\nexport const AppReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"APP/STATUS_TOGGLE\" :\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const appStatusToggleAC = (status: RequestStatusType) => (\r\n    {type: \"APP/STATUS_TOGGLE\", status} as const\r\n\r\n)\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof appStatusToggleAC>\r\n\r\n\r\n\r\n\r\nexport const AppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    authAPI.me().then(() => {\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n","import axios, {Axios, AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\" /*\"http://localhost:7542/2.0/\"*/,\r\n    withCredentials: true\r\n\r\n})\r\n\r\n//api\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n  }\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    login(params: LoginParamsType) {\r\n        return instance.post<any>('auth/login', params)\r\n    },\r\n    logOut(){\r\n        return instance.delete<any>('auth/me', {})\r\n    },\r\n    me(){\r\n        return instance.post<any>('auth/me', {})\r\n    },\r\n    register(params: LoginParamsType){\r\n        return instance.post<any>('auth/register', params)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//types\r\n\r\n","\r\nconst initialState = {\r\n    errorNetwork: \"\"\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    errorNetwork:  string;\r\n}\r\n\r\n\r\nexport const ErrorReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"ERROR/SET_ERROR_NETWORK\" :\r\n            return {...state, errorNetwork: action.error}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const setNetworkErrorAC = (error: string) => (\r\n    {type: \"ERROR/SET_ERROR_NETWORK\", error} as const\r\n\r\n)\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setNetworkErrorAC>\r\n\r\n\r\n","import {AxiosError} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/api\";\r\nimport { appStatusToggleAC, requestStatus } from \"../Registration/AppAC\";\r\nimport {setNetworkErrorAC} from \"../Registration/ErrorAC\";\r\n\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    user: {} as UserType\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean,\r\n    user: UserType\r\n}\r\n\r\n\r\nexport type UserType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\n\r\n\r\n\r\n\r\nexport const LoginReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOGIN/IS_LOGGED_IN\" :\r\n            return {...state, isLoggedIn: action.isLoggedIn};\r\n        case \"LOGIN/SET_USER_DATA\" :\r\n            return {...state, user: action.user}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst loginToggleAC = (isLoggedIn: boolean) => (\r\n    {type: \"LOGIN/IS_LOGGED_IN\", isLoggedIn} as const\r\n)\r\n\r\n\r\nexport const setUserDataAC = (user: UserType) => (\r\n    {type: \"LOGIN/SET_USER_DATA\", user} as const\r\n)\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof loginToggleAC>\r\n    | ReturnType<typeof setUserDataAC>\r\n\r\n\r\nexport const LoginTC = (params: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    authAPI.login(params).then((res) => {\r\n        console.log(\"user\", res.data)\r\n        const userData = res.data\r\n        dispatch(loginToggleAC(true))\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n        dispatch(setUserDataAC(userData))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\nexport const LogOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    authAPI.logOut().then((res) => {\r\n        dispatch(loginToggleAC(false))\r\n        console.log(\"user\", res.data)\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from './../../style/Common.module.css'\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginTC} from \"./LoginTC\";\r\nimport {AppStoreType} from \"../../Store/store\";\r\n\r\nexport const Login = () => {\r\n    const [email, setEmail] = useState<string>(\"trolololo@gmail.com\")\r\n    const [password, setPassword] = useState<string>(\"123456789As\")\r\n    const [rememberMe, setCheckBox] = useState<boolean>(false)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeCheckBoxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCheckBox(e.currentTarget.checked)\r\n    }\r\n\r\n\r\n    const onLoginButtonClick = () => {\r\n        dispatch(LoginTC({email, password, rememberMe}))\r\n    }\r\n    console.log(\"checkBox\", rememberMe)\r\n  if (isLoggedIn) {\r\n      return <Navigate to={\"/\"}/>\r\n  }\r\n\r\n    return (\r\n\r\n        <div className={styleCommon.wrapper}>\r\n            <div>Learning game</div>\r\n            <div>Sign in</div>\r\n            <div><input placeholder={\"Email\"}\r\n                        value={email} onChange={onChangeEmailHandler}/></div>\r\n            <div><input placeholder={\"Password\"}\r\n                        value={password} onChange={onChangePasswordHandler}/></div>\r\n            <div><input placeholder={\"remember me\"} type={\"checkbox\"}\r\n                       checked={rememberMe} onChange={onChangeCheckBoxHandler}/></div>\r\n            <Link to={\"/recover\"}> Forgot your password? </Link>\r\n            <div><button onClick={onLoginButtonClick}>Login</button> </div>\r\n            <div>Dont have an account</div>\r\n            <Link to={\"/registration\"}> Sign up </Link>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import {AxiosError} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/api\";\r\nimport {appStatusToggleAC, requestStatus} from \"./AppAC\";\r\nimport {setNetworkErrorAC} from \"./ErrorAC\";\r\n\r\nconst initialState = {\r\n    isAuth: false\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const RegisterReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"REGISTER/AUTH_TOGGLE\" :\r\n            return {...state, isAuth: action.isAuth}\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst authToggleAC = (isAuth: boolean) => (\r\n    {type: \"REGISTER/AUTH_TOGGLE\", isAuth} as const\r\n\r\n)\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof authToggleAC>\r\n\r\n\r\nexport const RegisterTC = (params: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    authAPI.register(params).then(() => {\r\n        dispatch(authToggleAC(true))\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\nimport styleRegister from \"./Registration.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RegisterTC} from './RegisterTC';\r\nimport {AppStoreType} from \"../../Store/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {requestStatus, RequestStatusType} from \"./AppAC\";\r\nimport {setNetworkErrorAC} from \"./ErrorAC\";\r\n\r\n\r\nconst Registration = () => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\")\r\n\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppStoreType, boolean>(state => state.register.isAuth)\r\n    const statusApp = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\r\n    const errorNetwork = useSelector<AppStoreType, string>(state => state.errors.errorNetwork)\r\n\r\n\r\n    const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeRepeatPasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRepeatPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onRegisterButtonClick = () => {\r\n        dispatch(RegisterTC({email, password}))\r\n    }\r\n    const onCancelButtonClick = () => {\r\n        dispatch(setNetworkErrorAC(\" \"))\r\n        setEmail(\"\")\r\n        setPassword(\"\")\r\n        setRepeatPassword(\"\")\r\n    }\r\n\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {statusApp === requestStatus.loading ? <div>Loading...</div> : (\r\n                <div className={styleCommon.wrapper}>\r\n                    <div>Learning game</div>\r\n                    <div>Sign up</div>\r\n                    {errorNetwork ? <span>{errorNetwork}</span>: <span></span>}\r\n                    <div>\r\n                        <input placeholder=\"Email\"\r\n                               value={email} onChange={onChangeEmailHandler}/></div>\r\n                    <div>\r\n                        <input placeholder=\"Password\"\r\n                               value={password} onChange={onChangePasswordHandler}/></div>\r\n                    <div>\r\n                        <input placeholder=\"Confirm password\"\r\n                               value={repeatPassword} onChange={onChangeRepeatPasswordHandler}/></div>\r\n                    <div className={styleRegister.btns}>\r\n                        <div>\r\n                            <button onClick={onCancelButtonClick}>Cancel</button>\r\n                        </div>\r\n                        <div>\r\n                            <button onClick={onRegisterButtonClick}>Register</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>)}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Registration;","import axios, {Axios, AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\" /*\"http://localhost:7542/2.0/\"*/,\r\n    withCredentials: true\r\n\r\n})\r\n\r\n//a\r\nexport type  UpdatedUser = {\r\n    name: string;\r\n    avatar: string;\r\n    email?: string\r\n}\r\n\r\n\r\n\r\nexport const profileAPI = {\r\n    updateUser(params: UpdatedUser) {\r\n        return instance.put<UpdatedUser, AxiosResponse<any>>(\r\n            'auth/me',\r\n            params,\r\n        );\r\n    },\r\n\r\n};\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\nimport styleProfile from \"./Profile.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LogOutTC, setUserDataAC, UserType} from \"../Login/LoginTC\";\r\nimport {AppStoreType} from \"../../Store/store\";\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport {profileAPI} from '../../api/profileApi';\r\n\r\nconst Profile = () => {\r\n    const user = useSelector<AppStoreType, UserType>(state => state.login.user)\r\n    const [name, setName] = useState(user.name);\r\n    const [email, setEmail] = useState(user.email);\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const userAvatar = useSelector<AppStoreType, string | undefined>(state => state.login.user.avatar)\r\n\r\n\r\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const onChangeHandlerName = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setName(event.currentTarget.value);\r\n    };\r\n    const onChangeHandlerEmail = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setEmail(event.currentTarget.value);\r\n    };\r\n\r\n    const data = {\r\n        avatar: \"https://tlgrm.ru/_/stickers/837/98f/83798fe7-d57e-300a-93fa-561e3027691e/2.jpg\",\r\n        name,\r\n        email\r\n    }\r\n\r\n    const activateEditForm = (): void => setEditMode(true);\r\n    const hideEditForm = (): void => {\r\n        setEditMode(false);\r\n    };\r\n\r\n    const onSendButtonClick = () => {\r\n        profileAPI.updateUser(data).then((res) => {\r\n        dispatch(setUserDataAC( res.data.updatedUser))\r\n        })\r\n    }\r\n    const onPhotoSelected = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        if (event.target.files) {\r\n        }\r\n    };\r\n\r\n    const dispatch = useDispatch();\r\n    const onLogOutButtonClick = () => {\r\n        dispatch(LogOutTC())\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'login'}/>\r\n    }\r\n    return (\r\n        <div className={styleCommon.wrapper}>\r\n            <h1>profile</h1>\r\n            <div><img src={userAvatar ? userAvatar : \"\"} alt={'userAvatar'} className={styleProfile.avatar}/></div>\r\n            {editMode ? (\r\n                <div><input\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={onChangeHandlerName}\r\n                    onBlur={hideEditForm}\r\n                /></div>\r\n            ) : (\r\n                <span onDoubleClick={activateEditForm}>userName: {user.name}</span>\r\n            )}\r\n            {editMode ? (\r\n                <div><input\r\n                    name=\"email\"\r\n                    value={email}\r\n                    onChange={onChangeHandlerEmail}\r\n                    onBlur={hideEditForm}\r\n                /></div>\r\n            ) : (\r\n                <span onDoubleClick={activateEditForm}>userEmail: {user.email}</span>\r\n            )}\r\n            <div className={styleProfile.btns}>\r\n                <button onClick={onLogOutButtonClick}>LogOut</button>\r\n                <button onClick={onSendButtonClick}>send</button>\r\n                <Link to=\"packs\"> Packs </Link>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <div className={styleCommon.wrapper}>\r\n            <h1>404:page NOT found</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Page404;","import axios, {Axios, AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\" /*\"http://localhost:7542/2.0/\"*/,\r\n    withCredentials: true\r\n\r\n})\r\n\r\n//api\r\n\r\nexport type AddNewPassType = {\r\n    email: string;\r\n    from?: string\r\n    message?: string\r\n};\r\n\r\n\r\nexport type SetNewPassType = {\r\n    password: string;\r\n    resetPasswordToken?: string;\r\n};\r\n\r\n\r\nexport const addNewPassAPI = {\r\n    addNewPass(params: AddNewPassType) {\r\n        return instance.post<AddNewPassType, AxiosResponse<any>>(\r\n            'auth/forgot',\r\n            params,\r\n        );\r\n    },\r\n    setNewPass(params: SetNewPassType) {\r\n        return instance.post<SetNewPassType, AxiosResponse<any>>(\r\n            'auth/set-new-password',\r\n            params,\r\n        );\r\n    },\r\n};\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {addNewPassAPI, AddNewPassType} from \"../../api/forgotPasswordApi\";\r\n\r\nconst ForgotPassword = () => {\r\n    const [email, setEmail] = useState<string>(\"samutic40@gmail.com\")\r\n\r\n    const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const dataPayload: AddNewPassType = {\r\n        email,\r\n        from: 'test-front-admin <samutic40@gmail.com>',\r\n        message: `<div style='background-color: #ffd500; \r\npadding: 15px; \r\nborder-color: #ff9900; \r\nwidth: 250px;\r\nheight: 30px'> \r\npassword recovery link: <a href='http://localhost:3000/cards#/newPassword/$token$'> recovery link </a></div>`,\r\n    };\r\n\r\n\r\n    const onSendButtonClick = () => {\r\n        addNewPassAPI.addNewPass(dataPayload).then((res) => {\r\n            console.log(\"res\", res.data)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styleCommon.wrapper}>\r\n            <div>Learning game</div>\r\n            <div>Forgot your password?</div>\r\n            <div><input placeholder={\"Email\"}\r\n            value={email} onChange={onChangeEmailHandler}/></div>\r\n            <div>Enter your Email and we will send you further instructions</div>\r\n            <div><button onClick={onSendButtonClick}>Send instructions</button> </div>\r\n            <div>Did you remember your password?</div>\r\n            <Link to={\"/login\"}> Try logging in </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPassword;","import React, {ChangeEvent, useState} from 'react';\r\nimport styleCommon from \"../../style/Common.module.css\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {addNewPassAPI} from \"../../api/forgotPasswordApi\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst CreateNewPassword = () => {\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [loadedStatus, setLoadedStatus] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const params = useParams<'token'>();\r\n    const { token } = params as { token: string };\r\n\r\n    const data: any = {\r\n        password: newPassword,\r\n        resetPasswordToken: token,\r\n    };\r\n\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onCreateButtonClick = () => {\r\n        addNewPassAPI.setNewPass(data).then((res) => {\r\n            setLoadedStatus((prev) => true)\r\n        })\r\n\r\n    }\r\n\r\n    if (loadedStatus) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return (\r\n        <div className={styleCommon.wrapper}>\r\n            <div>Learning game</div>\r\n            <div>Create new password?</div>\r\n            <div><input placeholder={\"Password\"} onChange={onChangePasswordHandler} value={newPassword}/></div>\r\n            <div>Create new password and we will send you further instructions to email</div>\r\n            <div><button onClick={onCreateButtonClick}\r\n            >Create new password</button> </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateNewPassword;","import axios, {Axios, AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\" /*\"http://localhost:7542/2.0/\"*/,\r\n    withCredentials: true\r\n\r\n})\r\nexport type dataRequestType = {\r\n    page?: number,\r\n    pageCount?: number,\r\n    min?: number,\r\n    max? : number,\r\n    sortPacks? : string,\r\n    user_id? : string,\r\n    packName? : string\r\n}\r\n\r\n\r\n\r\nexport const packsAPI = {\r\n    getPacks(data:dataRequestType) {\r\n        return instance.get<any, AxiosResponse<any>>(\r\n            'cards/pack', {params: {...data}});\r\n    },\r\n   /* sortPacks(page?: number, pageCount?: number, user_id?: string) {\r\n        return instance.get<any, AxiosResponse<any>>(\r\n            'cards/pack', {params: {page, pageCount, user_id}})\r\n    },\r\n\r\n    sortUpDownPacks(page?: number, pageCount?: number, sortPacks?: string) {\r\n        return instance.get<any, AxiosResponse<any>>(\r\n            'cards/pack', {params: {page, pageCount, sortPacks}})\r\n    },\r\n\r\n    searchPacks(searchWord: string, page?: number, pageCount?: number) {\r\n        return instance.get<any, AxiosResponse<any>>(\r\n            `cards/pack?packName=${searchWord}`, {params: {page, pageCount}})\r\n    },*/\r\n\r\n\r\n    removePack(id: string) {\r\n        return instance.delete<any, AxiosResponse<any>>(`cards/pack?id=${id}`);\r\n    },\r\n    addPack(cardsPack: cardsPackType) {\r\n        return instance.post<any, AxiosResponse<any>>('cards/pack', {cardsPack});\r\n    },\r\n    updatePack(updatedPack: any) {\r\n        return instance.put<any, AxiosResponse<any>>('cards/pack', updatedPack);\r\n    },\r\n\r\n\r\n};\r\n\r\nexport type cardsPackType = {\r\n    name?: string;// если не отправить будет таким\r\n    path?: string;\r\n    grade?: number; // не обязателен\r\n    shots?: number; // не обязателен\r\n    rating?: number; // не обязателен\r\n    deckCover?: string; // не обязателен\r\n    private?: boolean; // если не отправить будет такой\r\n    type?: string// если не отправить будет таким\r\n}\r\n\r\nexport type updatedPackType = {\r\n    _id: string;\r\n    name?: string;\r\n}\r\n\r\n\r\n\r\n","import {AxiosError} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/api\";\r\nimport {cardsPackType, packsAPI, updatedPackType} from \"../../api/packsApi\";\r\nimport {appStatusToggleAC, requestStatus} from \"../Registration/AppAC\";\r\nimport {setNetworkErrorAC} from \"../Registration/ErrorAC\";\r\n\r\n\r\nexport type PackTemplate = {\r\n    _id: string,\r\n    user_id: string,\r\n    name: string;\r\n    path: string; // папка\r\n    cardsCount: number;\r\n    grade: number; // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: string; // ещё будет \"folder\" (папка)\r\n    created: Date;\r\n    updated: Date;\r\n    __v: number;\r\n    user_name: string\r\n}\r\n\r\n\r\nconst PACKS_SET_CURRENT_PAGE = \"PACKS/SET_CURRENT_PAGE\";\r\nconst PACKS_SET_TOTAL_COUNT = \"PACKS_SET_TOTAL_COUNT\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [],\r\n    cardPacksTotalCount: 0, //общее число репо\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 20 //количество на одной странице\r\n\r\n}\r\n\r\nexport type ResponsePacksType = {\r\n    cardPacks: PackTemplate[];\r\n    cardPacksTotalCount: number; //общее количество страниц\r\n    maxCardsCount: number;\r\n    minCardsCount: number;\r\n    page: number; //номер страницы\r\n    pageCount: number; //на странице\r\n}\r\n\r\nexport const PacksReducer = (state: ResponsePacksType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"PACKS/SET_PACKS\" :\r\n            return {...state, ...action.payload}\r\n\r\n        case PACKS_SET_CURRENT_PAGE :\r\n            return {...state, page: action.currentPage}\r\n\r\n        case PACKS_SET_TOTAL_COUNT :\r\n            return {...state, cardPacksTotalCount: action.cardPacksTotalCount}\r\n\r\n        case \"PACKS/REMOVE_PACK\" :\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.filter(deck => deck._id !== action.id),\r\n            };\r\n        case \"PACKS/ADD_PACK\" :\r\n            return {...state, cardPacks: [action.pack, ...state.cardPacks]};\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst setPacksAC = (payload: ResponsePacksType) => (\r\n    {type: \"PACKS/SET_PACKS\", payload} as const\r\n)\r\n\r\nexport const setCurrentPageAC = (currentPage: number) => (\r\n    {type: PACKS_SET_CURRENT_PAGE, currentPage} as const\r\n)\r\n\r\nexport const setTotalCountAC = (cardPacksTotalCount: number) => (\r\n    {type: PACKS_SET_TOTAL_COUNT, cardPacksTotalCount} as const\r\n)\r\n\r\n\r\nexport const removePackAC = (id: string) => (\r\n    {type: \"PACKS/REMOVE_PACK\", id} as const\r\n)\r\n\r\n\r\nexport const addPackAC = (pack: any) => (\r\n    {type: \"PACKS/ADD_PACK\", pack} as const\r\n)\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setPacksAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setTotalCountAC>\r\n    | ReturnType<typeof removePackAC>\r\n    | ReturnType<typeof addPackAC>\r\n\r\n\r\nexport const PacksTC = (page: number = 1) => (dispatch: Dispatch, getState: any) => {\r\n    const {pageCount, cardPacksTotalCount} = getState().packs\r\n\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    packsAPI.getPacks({page, pageCount}).then((res) => {\r\n        dispatch(setCurrentPageAC(page))\r\n        dispatch(setPacksAC(res.data))\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n\r\nexport const removePackTC = (_id: string) => (dispatch: Dispatch, getState: any) => {\r\n    const {cardPacks, page, pageCount, cardPacksTotalCount} = getState().packs\r\n\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    packsAPI.removePack(_id).then((res) => {\r\n        // @ts-ignore\r\n        dispatch(PacksTC())\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\nexport const addPackTC = (pack: cardsPackType) => (dispatch: Dispatch, getState: any) => {\r\n    const {cardPacks, page, pageCount, cardPacksTotalCount} = getState().packs\r\n\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    packsAPI.addPack(pack).then((res) => {\r\n        const result = res.data.newCardsPack\r\n        // @ts-ignore\r\n        dispatch(PacksTC())\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n\r\nexport const updatedPackTC = (updatedPack: updatedPackType) => (dispatch: Dispatch, getState: any) => {\r\n    const {cardPacks, page, pageCount, cardPacksTotalCount} = getState().packs\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    packsAPI.updatePack(updatedPack).then((res) => {\r\n        // @ts-ignore\r\n        dispatch(PacksTC())\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\nexport const sortMyPacksTC = () => (dispatch: Dispatch, getState: any) => {\r\n    const {cardPacks, page, pageCount, cardPacksTotalCount} = getState().packs\r\n    const {_id} = getState().login.user\r\n\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    packsAPI.getPacks({user_id: _id, page, pageCount}).then((res) => {\r\n        console.log(\"res.data\", res.data)\r\n        dispatch(setPacksAC(res.data))\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\nexport const sortUpPacksTC = (sortPacks: string ) => (dispatch: Dispatch, getState: any) => {\r\n    const {cardPacks, page, pageCount, cardPacksTotalCount} = getState().packs\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    packsAPI.getPacks({sortPacks, page, pageCount}).then((res) => {\r\n        \r\n        console.log(\"res.data\", res.data)\r\n        dispatch(setPacksAC(res.data))\r\n        \r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\nexport const searchPacksTC = (searchName: string ) => (dispatch: Dispatch, getState: any) => {\r\n    const {cardPacks, page, pageCount, cardPacksTotalCount} = getState().packs\r\n    dispatch(appStatusToggleAC(requestStatus.loading))\r\n    packsAPI.getPacks({packName: searchName, page, pageCount} ).then((res) => {\r\n\r\n        console.log(\"res.data\", res.data)\r\n        dispatch(setPacksAC(res.data))\r\n\r\n        dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n    })\r\n        .catch((e: AxiosError) => {\r\n            dispatch(appStatusToggleAC(requestStatus.failed))\r\n            const errorNetwork = e.response\r\n                ? e.response.data.error\r\n                : `${e.message}, more details in the console`\r\n            console.log(errorNetwork)\r\n            dispatch(setNetworkErrorAC(errorNetwork))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useState } from 'react';\r\n\r\nexport const Range = () => {\r\n    const initialValue = 0;\r\n    const [number, setNumber] = useState<number>(initialValue);\r\n    const onChangeRange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        setNumber(+e.currentTarget.value);\r\n    };\r\n    return (\r\n        <div>\r\n            {number}\r\n            <input\r\n                type=\"range\"\r\n                onChange={onChangeRange}\r\n                value={number}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport { AppStoreType } from '../../Store/store';\r\nimport {PacksTC, sortMyPacksTC } from './PacksTC';\r\nimport {Range} from './Range'\r\nimport styleSort from \"./Sort.module.css\";\r\n\r\n\r\nconst SortPart = () => {    \r\n    const dispatch = useDispatch();\r\n    \r\n    const onMyPacksClick = () => {\r\n        dispatch(sortMyPacksTC())\r\n    }\r\n\r\n    const onAllPacksClick = () => {\r\n        dispatch(PacksTC())\r\n    }\r\n    return (\r\n        <div className={styleSort.content}>\r\n            <div>Show packs cards</div>\r\n            <div className={styleSort.btns}>\r\n            <button onClick={onMyPacksClick}>My</button>\r\n            <button onClick={onAllPacksClick}>All</button>\r\n            </div>\r\n            <span>Number of cards</span>\r\n            <Range/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortPart;","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {PacksTC, setCurrentPageAC} from './PacksTC';\r\nimport styleTable from \"./Table.module.css\";\r\n\r\nexport type PaginationPropsType = {\r\n    totalCount: number,\r\n    pageCount: number,\r\n    currentPage: number\r\n}\r\n\r\nexport const Pagination = (props: PaginationPropsType) => {\r\n    const pages: number[] = [];\r\n    let pagesCount = Math.ceil(props.totalCount / props.pageCount )\r\n    createPages(pages, props.totalCount,props.currentPage )\r\n\r\n    function createPages(pages: number[], pagesCount: number, currentPage: number) {\r\n        if (pagesCount > 20) {\r\n            if (currentPage > 10) {\r\n                for (let i = currentPage - 4; i <= currentPage + 5; i++) {\r\n                    pages.push(i)\r\n                    if (i == pagesCount) break\r\n                }\r\n            } else {\r\n                for (let i = 1; i <= 15; i++) {\r\n                    pages.push(i)\r\n                    if (i == pagesCount) break\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 1; i <= pagesCount; i++) {\r\n                pages.push(i)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n  /*  let pagesCount = Math.ceil(props.totalCount / props.pageCount / 30)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    const onPaginationPaged = (page: number) => {\r\n        dispatch(PacksTC(page))\r\n    }\r\n*/\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n\r\n            {pages.map((page: number, index) => <button key={index}\r\n                                                        className={props.currentPage === page ? styleTable.selectedPage : \"\"}\r\n\r\n                                                        onClick={() => {\r\n                                                            dispatch(setCurrentPageAC(page))\r\n                                                            dispatch(PacksTC(page))\r\n                                                        }}\r\n\r\n            >{page}</button>)}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { sortUpPacksTC } from './PacksTC';\r\nimport styleSort from \"./Sort.module.css\";\r\n\r\nconst Sort = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const up = '1updated'\r\n    const down = '0updated';\r\n    const upCards = '0cardsCount'\r\n    const downCards = '1cardsCount';\r\n    \r\n    const onUpSortClick = () => {\r\n        dispatch(sortUpPacksTC(upCards))\r\n    }\r\n\r\n    const onDownSortClick = () => {\r\n        dispatch(sortUpPacksTC(downCards))\r\n    }\r\n    return (\r\n        <div className={styleSort.arrows}>\r\n            <div className={styleSort.arrowUp} onClick={onUpSortClick}></div>\r\n            <div className={styleSort.arrowDown} onClick={onDownSortClick}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sort;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Link, Navigate} from 'react-router-dom';\r\nimport { updatedPackType } from '../../api/packsApi';\r\nimport {AppStoreType} from '../../Store/store';\r\nimport {addPackTC, PacksTC, PackTemplate, removePackTC, ResponsePacksType,\r\n    searchPacksTC, setCurrentPageAC, updatedPackTC} from './PacksTC';\r\nimport {Pagination} from './Pagination';\r\nimport Sort from './Sort';\r\nimport styleTable from \"./Table.module.css\";\r\n\r\nconst Table = () => {\r\n    const packs = useSelector<AppStoreType, PackTemplate[]>(state => state.packs.cardPacks)\r\n    const currentPage = useSelector<AppStoreType, number>(state => state.packs.page)\r\n    const pageCount = useSelector<AppStoreType, number>(state => state.packs.pageCount)\r\n    const totalCount = useSelector<AppStoreType, number>(state => state.packs.cardPacksTotalCount)\r\n\r\n    const [searchName, setSearchName]= useState(\"\")\r\n\r\n    // useEffect(()=>{dispatch(PacksTC())}, [currentPage])\r\n\r\n    const onChangeSearchName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchName(e.currentTarget.value)\r\n    }\r\n    const onEnterPress = (e: any) => {\r\n        if (e.charCode === 13) {\r\n          dispatch(searchPacksTC(searchName));\r\n            setSearchName('');\r\n        }\r\n    };\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    const onClickAddPacksHandler = () => {dispatch(PacksTC())}\r\n\r\n    const onClickAddPackHandler = () => {dispatch(addPackTC({}))}\r\n\r\n    const onDeleteButtonClick = (id: string) => {dispatch(removePackTC(id))};\r\n\r\n\r\n    const resultPacks = packs.map((pack: PackTemplate) =>\r\n        <div className={styleTable.table} key={pack._id}>\r\n            <div className={styleTable.tableEl}>{pack.name}</div>\r\n            <div className={styleTable.tableElSmall}>{pack.cardsCount}</div>\r\n            <div className={styleTable.tableEl}>{pack.user_name}</div>\r\n            <div className={styleTable.tableEl}>{pack.updated}</div>\r\n            <div>\r\n                <button onClick={() => onDeleteButtonClick(pack._id)}>del</button>\r\n            </div>\r\n            <div>\r\n                <button onClick={() =>{}}>update</button>\r\n            </div>\r\n            <Link to={'/cards'}> cards </Link>\r\n        </div>)\r\n\r\n    return ( <div className={styleTable.content}>\r\n            <button onClick={onClickAddPacksHandler}>add packs</button>\r\n            <div> Packs list </div>\r\n            <div>\r\n                <input placeholder='search'\r\n                value={searchName}\r\n                onChange={onChangeSearchName}\r\n                onKeyPress={onEnterPress}/>\r\n                <button onClick={onClickAddPackHandler}>Add new pack</button>\r\n            </div>\r\n            \r\n         <Pagination pageCount={pageCount} currentPage={currentPage} totalCount={totalCount} key={Math.random() * 100000}/>\r\n            \r\n            <div className={styleTable.table}>\r\n                <div className={styleTable.tableEl}>Name</div>\r\n                <div className={styleTable.tableElSmall}>CardsCount<Sort/></div>\r\n                <div className={styleTable.tableEl}>Created by</div>\r\n                <div className={styleTable.tableEl}>Updated<Sort/></div>\r\n            </div>\r\n            {resultPacks}\r\n        </div>\r\n    );\r\n}\r\nexport default Table;\r\n\r\n\r\n\r\n{/* {editMode ? (\r\n                <div className={styleTable.tableEl}><input\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={onChangeHandlerName}\r\n                    onBlur={()=>{hideEditForm(pack._id, name)}}\r\n                /></div>\r\n            ) : (\r\n                <span className={styleTable.tableEl} onDoubleClick={activateEditForm}>{pack.name}</span>\r\n            )}*/}\r\n\r\n// const [name, setName] = useState(\"\");\r\n\r\n// const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n// const onChangeHandlerName = (event: ChangeEvent<HTMLInputElement>): void => {\r\n//     setName(event.currentTarget.value);\r\n// };\r\n// const activateEditForm = (): void => setEditMode(true);\r\n//\r\n// const hideEditForm = (_id: string, name: string): void => {\r\n//     setEditMode(false);\r\n//     dispatch(updatedPackTC({_id, name}));\r\n// };","import React from 'react';\r\nimport SortPart from './SortPart';\r\nimport Table from './Table';\r\nimport stylePacks from \"./Packs.module.css\";\r\nimport { Navigate } from 'react-router-dom';\r\nimport { AppStoreType } from '../../Store/store';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n\r\n\r\n\r\nconst Packs = () => {\r\n    const isLoggedIn = useSelector<AppStoreType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'login'}/>\r\n    }\r\n    return (\r\n        <div className={stylePacks.content}>\r\n            <SortPart/>\r\n            <Table/>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Packs;\r\n\r\n","import axios, {Axios, AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\" /*\"http://localhost:7542/2.0/\"*/,\r\n    withCredentials: true\r\n\r\n})\r\n\r\n\r\nexport const cardsAPI = {\r\n    getCards(cardsPackId: string, answer: string, question: string) {\r\n        return instance.get<AxiosResponse<ResponseType>>('cards/card', {\r\n            params: { cardsPackId, answer, question },\r\n        });\r\n    },\r\n    deleteCard(_id: string) {\r\n        return instance.delete<AxiosResponse<ResponseType>>(`cards/card?=${_id}`, {});\r\n    },\r\n    addNewCard(params: AddCardType) {\r\n        return instance.post<cardType, AxiosResponse<any>>('cards/card', {\r\n            params: { params },\r\n        });\r\n    },\r\n    updateCard({ _id, answer, question }: cardType) {\r\n        return instance.put<cardType, any>('cards/card', {\r\n            card: { _id, answer, question },\r\n        });\r\n    },\r\n};\r\n\r\nexport type AddCardType = {\r\n    // cardsPack_id: string;\r\n    answer: string;\r\n    question: string;\r\n    grade: number;\r\n    shots: number;\r\n};\r\n\r\n\r\nexport type cardType = {\r\n    _id: string;\r\n    user_id: string;\r\n    answer: string;\r\n    question: string;\r\n    cardsPack_id: string;\r\n    grade?: number;\r\n    shots?: number;\r\n    rating?: number;\r\n    type?: string;\r\n    created?: string;\r\n    updated?: string;\r\n    __v?: number;\r\n};\r\nexport type ResponseType = {\r\n    cards: cardType[];\r\n    cardsTotalCount: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    packUserId: string;\r\n};\r\n","import { AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { AddCardType, cardsAPI, cardType } from '../../api/cardsApi';\r\nimport { appStatusToggleAC, requestStatus } from '../Registration/AppAC';\r\n\r\n\r\n\r\ntype initStateType = {\r\n    cards: cardType[];\r\n    answer: string;\r\n    question: string;\r\n    cardsTotalCount: number;\r\n    grade: number;\r\n    shots: number;\r\n    maxGrade: number;\r\n    minGrade: number;\r\n    page: number;\r\n    pageCount: number;\r\n    packUserId: string;\r\n};\r\nconst initialState: initStateType = {\r\n    cards: [],\r\n    answer: '',\r\n    question: '',\r\n    cardsTotalCount: 5,\r\n    grade: 5,\r\n    shots: 1,\r\n    maxGrade: 5,\r\n    minGrade: 3,\r\n    page: 1,\r\n    pageCount: 4,\r\n    packUserId: '',\r\n};\r\nexport const cardReducer = (\r\n    state: initStateType = initialState,\r\n    action: ActionTypesCards,\r\n): initStateType => {\r\n    switch (action.type) {\r\n        case 'CARDS/SET_DATA_CARDS':\r\n            return { ...state, ...action.cards };\r\n        case 'CARDS/REMOVE_CARD':\r\n            return { ...state, cards: state.cards.filter(c => c._id !== action._id) };\r\n        case 'CARDS/ADD_CARD':\r\n            return { ...state, cards: [action.card, ...state.cards] };\r\n        case 'CARDS/UPDATE_CARD':\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(c =>\r\n                    c._id === action.dataUpdate._id\r\n                        ? {\r\n                            ...c,\r\n                            question: action.dataUpdate.question,\r\n                            answer: action.dataUpdate.answer,\r\n                        }\r\n                        : c,\r\n                ),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setCardsAC = (cardsPackId: string, cards: cardType[]) =>\r\n    ({ type: 'CARDS/SET_DATA_CARDS', cardsPackId, cards } as const);\r\n\r\nexport const removeCardAC = (_id: string) =>\r\n    ({ type: 'CARDS/REMOVE_CARD', _id } as const);\r\n\r\nexport const addCardAC = (card: cardType) => ({ type: 'CARDS/ADD_CARD', card } as const);\r\n\r\nexport const updateCardAC = (_id: string, answer: string, question: string) =>\r\n    ({\r\n        type: 'CARDS/UPDATE_CARD',\r\n        dataUpdate: {\r\n            _id,\r\n            answer,\r\n            question,\r\n        },\r\n    } as const);\r\n\r\n\r\nexport type ActionTypesCards =\r\n    | ReturnType <typeof setCardsAC > \r\n    | ReturnType <typeof removeCardAC > \r\n    | ReturnType <typeof addCardAC > \r\n    | ReturnType <typeof updateCardAC > \r\n    \r\n\r\n\r\nexport const getCardsTC =\r\n    (cardsPackId: string) =>\r\n        (\r\n            dispatch: Dispatch,\r\n            getState: any) => {\r\n            const { answer, question } = getState().cards;\r\n            dispatch(appStatusToggleAC(requestStatus.loading))\r\n            cardsAPI\r\n                .getCards(cardsPackId, answer, question)\r\n                .then(res => {\r\n                    dispatch(setCardsAC(cardsPackId, res.data.data.cards));\r\n                    dispatch(appStatusToggleAC(requestStatus.succeeded))\r\n                })\r\n                .catch(e => {\r\n                    dispatch(appStatusToggleAC(requestStatus.failed))\r\n                    const errorNetwork = e.response\r\n                        ? e.response.data.error\r\n                        : `${e.message}, more details in the console`;\r\n                })\r\n                    };\r\n\r\n\r\n\r\n/*\r\nexport const removeCardTC =\r\n    (_id: string) =>\r\n        (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\r\n            dispatch(setAppStatusAC(requestStatus.loading));\r\n            cardsAPI\r\n                .deleteCard(_id)\r\n                .then(() => {\r\n                    dispatch(removeCardAC(_id));\r\n                    dispatch(setAppStatusAC(requestStatus.succeeded));\r\n                })\r\n                .catch((e: AxiosError) => {\r\n                    dispatch(setAppStatusAC(requestStatus.succeeded));\r\n                    const errorNetwork = e.response\r\n                        ? e.response.data.error\r\n                        : `${e.message}, more details in the console`;\r\n                    dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n                });\r\n        };\r\n\r\nexport const addCardTC =\r\n    (payload: AddCardType) =>\r\n        (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\r\n            dispatch(setAppStatusAC(requestStatus.loading));\r\n            cardsAPI.addNewCard(payload).then(res => {\r\n                const newCard = res.data.cards;\r\n                dispatch(addCardAC(newCard));\r\n                dispatch(setAppStatusAC(requestStatus.succeeded));\r\n            });\r\n        };\r\n\r\nexport const updateCardTC =\r\n    (dataUpdate: cardType) =>\r\n        (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\r\n            dispatch(setAppStatusAC(requestStatus.loading));\r\n            cardsAPI.updateCard(dataUpdate).then(res => {\r\n                const { _id, question, answer } = res.data.cards;\r\n                dispatch(updateCardAC(_id, question, answer));\r\n                dispatch(setAppStatusAC(requestStatus.succeeded));\r\n            });\r\n        };\r\n\r\n// types*/\r\n/*\r\nexport type getCardsType = ReturnType<typeof setCardsAC>;\r\nexport type removeCardType = ReturnType<typeof removeCardAC>;\r\nexport type addCardType = ReturnType<typeof addCardAC>;\r\nexport type updateCardType = ReturnType<typeof updateCardAC>;\r\n*/\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useNavigate, useParams} from 'react-router-dom';\r\nimport {AppStoreType} from '../../Store/store';\r\nimport {getCardsTC} from './CardsTC';\r\n\r\nconst Cards = () => {\r\n\r\n\r\n    const cards = useSelector<AppStoreType, any>(state => state.cards.cards)\r\n\r\n    console.log(\"cards\", cards)\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const params = useParams<'cardsPack_id'>();\r\n    const {cardsPack_id} = params as { cardsPack_id: string };\r\n\r\n    const onClickRemoveCard = (_id: string): void => {\r\n        /*  dispatch(removeCardTC(_id));\r\n          dispatch(setErrorMessageNetworkAC(''));*/\r\n    };\r\n    const onClickAddCard = (): void => {\r\n        navigate('/card');\r\n    };\r\n\r\n    const resultCard = cards.map((card: any) => <div>\r\n        <div>{card.name}</div>\r\n        <div>{card.question}</div>\r\n        <div>{card.answer}</div>\r\n        <div>{card.updated}</div>\r\n        <div style={{display: 'flex'}}>\r\n            <button>updated</button>\r\n            <button>delete</button>\r\n        </div>\r\n\r\n\r\n    </div>)\r\n\r\n    useEffect(() => {\r\n        if (!cardsPack_id) {\r\n            return;\r\n        }\r\n        dispatch(getCardsTC(cardsPack_id));\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <button> add new card</button>\r\n            {resultCard}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import React from 'react';\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../Login/Login\";\r\nimport Registration from \"../Registration/Registration\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport Page404 from \"../404/Page404\";\r\nimport ForgotPassword from \"../Forgot Password/ForgotPassword\";\r\nimport CreateNewPassword from \"../Forgot Password/CreateNewPassword\";\r\nimport Packs from \"../Packs/Packs\";\r\n\r\nimport Cards from '../Cards/Cards';\r\n\r\nconst RoutesPart = () => {\r\n    return (\r\n\r\n            <Routes>\r\n                <Route path={'login'} element={<Login/>}/>\r\n                <Route path={'registration'} element={<Registration/>}/>\r\n                <Route path={'/'} element={<Profile/>}/>\r\n                <Route path={'404'} element={<Page404/>}/>\r\n                <Route path={'*'} element={<Navigate to='/404'/>}/>\r\n                <Route path={'recover'} element={<ForgotPassword/>}/>\r\n                <Route path={'packs'} element={<Packs/>}/>\r\n                <Route path={'cards'} element={<Cards/>}>\r\n                    <Route path=\":cardsPack_id\" element={<Cards />} />\r\n                </Route>\r\n                <Route path={'newPassword'} element={<CreateNewPassword/>}>\r\n                    <Route path=\":token\" element={<CreateNewPassword/>}/>\r\n                </Route>\r\n            </Routes>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default RoutesPart;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport RoutesPart from \"./Component/Routes/Routes\";\r\nimport {AppTC, requestStatus, RequestStatusType} from \"./Component/Registration/AppAC\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"./Store/store\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n    const statusApp = useSelector<AppStoreType, RequestStatusType>(state => state.app.status)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        dispatch(AppTC())\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                <NavLink to={'login'}>login</NavLink>---\r\n                <NavLink to={'/'}>profile</NavLink>---\r\n                <NavLink to={'registration'}>registration</NavLink>---\r\n                <NavLink to={'recover'}>recover</NavLink>---\r\n                <NavLink to={'*'}>404</NavLink>---\r\n                <NavLink to={'newPassword/:token'}>create new</NavLink>---\r\n                <NavLink to={'packs'}>packs</NavLink>----\r\n                <NavLink to={'cards'}>cards</NavLink>----\r\n            </div>\r\n\r\n            {statusApp === requestStatus.loading ? <div> loading... </div> :  <RoutesPart/>  }\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\n\r\nimport {RegisterReducer} from \"../Component/Registration/RegisterTC\";\r\nimport thunk from 'redux-thunk';\r\nimport {AppReducer} from \"../Component/Registration/AppAC\";\r\nimport {ErrorReducer} from \"../Component/Registration/ErrorAC\";\r\nimport {LoginReducer} from \"../Component/Login/LoginTC\";\r\nimport { PacksReducer } from '../Component/Packs/PacksTC';\r\nimport { cardReducer } from '../Component/Cards/CardsTC';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    cards: cardReducer,\r\n    register: RegisterReducer,\r\n    app: AppReducer,\r\n    errors: ErrorReducer,\r\n    login: LoginReducer,\r\n    packs: PacksReducer\r\n})\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Store/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Table_content__3zSW8\",\"table\":\"Table_table__cJSbb\",\"tableEl\":\"Table_tableEl__2LAda\",\"tableElSmall\":\"Table_tableElSmall__19iaT\",\"selectedPage\":\"Table_selectedPage__1Tqon\"};"],"sourceRoot":""}