{"version":3,"sources":["Component/SuperButton/SuperButton.module.css","Component/SuperCheckBox/SuperCheckbox.module.css","Component/SuperInput/SuperInput.tsx","Component/SuperButton/SuperButton.tsx","Component/SuperCheckBox/SuperCheckbox.tsx","Component/Test.tsx","App.tsx","reportWebVitals.ts","Store/cards.ts","Store/store.ts","index.tsx","Component/SuperInput/SuperInputText.module.css"],"names":["module","exports","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","input","errorInput","superInput","e","currentTarget","value","key","SuperButton","red","finalClassName","button","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","Test","style","textAlign","width","margin","SuperInput","placeholder","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","reducers","combineReducers","cards","state","action","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f42439f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2BR4T\",\"red\":\"SuperButton_red__1BJ7L\",\"button\":\"SuperButton_button__1flbz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__13DNj\",\"spanClassName\":\"SuperCheckbox_spanClassName__2WrU2\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName =`${s.button} ${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange (e)\r\n        onChangeChecked && onChangeChecked (e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React from 'react';\r\nimport SuperInputText from \"./SuperInput/SuperInput\";\r\nimport SuperButton from \"./SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"./SuperCheckBox/SuperCheckbox\";\r\n\r\n\r\nconst Test = () => {\r\n    return (\r\n        <div style={{textAlign: \"center\", width: \"700px\", margin: \"50px\"}}>\r\n            <SuperInputText\r\n            placeholder=\"enter smth?\"/>\r\n\r\n            <SuperButton>\r\n               press me again\r\n            </SuperButton>\r\n\r\n            <SuperCheckbox\r\n            />\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Test;","import React from 'react';\nimport './App.css';\nimport {Route, Routes} from \"react-router-dom\";\nimport Test from \"./Component/Test\";\n\nfunction App() {\n  return (\n    <div>\n      <Routes>\n        <Route path='/login' element={<div><h1>login</h1></div>}/>\n        <Route path='/registration' element={<div><h1>registration</h1></div>}/>\n        <Route path='/profile' element={<div><h1>profile</h1></div>}/>\n        <Route path='/404' element={<div style={{textAlign: \"center\"}}><h1>404:page NOT found</h1></div>}/>\n        <Route path='/recover' element={<div><h1>recover password</h1></div>}/>\n        <Route path='/newPassword' element={<div><h1>add new password</h1></div>}/>\n        <Route path='/' element={<Test/>}/>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = {\r\n\r\n}\r\n\r\ntype initStateType = {\r\n\r\n}\r\n\r\nexport const cardReducer = (state: initStateType = initState, action: any): initStateType => {\r\n    switch (action.type) {\r\n        case '': {\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {combineReducers, createStore} from 'redux'\r\nimport {cardReducer} from \"./cards\";\r\n\r\n\r\nconst reducers = combineReducers({\r\ncards: cardReducer\r\n})\r\nconst store = createStore(reducers)\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n          <Provider store={store}>\n    <App />\n          </Provider>\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__kSSu6\",\"input\":\"SuperInputText_input__2gtm6\",\"errorInput\":\"SuperInputText_errorInput__3qbXt\",\"error\":\"SuperInputText_error__bugYR\"};"],"sourceRoot":""}